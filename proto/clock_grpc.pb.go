// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package clock

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ClockServiceClient is the client API for ClockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClockServiceClient interface {
	Clock(ctx context.Context, in *ClockRequest, opts ...grpc.CallOption) (*ClockResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
}

type clockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClockServiceClient(cc grpc.ClientConnInterface) ClockServiceClient {
	return &clockServiceClient{cc}
}

func (c *clockServiceClient) Clock(ctx context.Context, in *ClockRequest, opts ...grpc.CallOption) (*ClockResponse, error) {
	out := new(ClockResponse)
	err := c.cc.Invoke(ctx, "/clock.ClockService/Clock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clockServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/clock.ClockService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClockServiceServer is the server API for ClockService service.
// All implementations must embed UnimplementedClockServiceServer
// for forward compatibility
type ClockServiceServer interface {
	Clock(context.Context, *ClockRequest) (*ClockResponse, error)
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	mustEmbedUnimplementedClockServiceServer()
}

// UnimplementedClockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClockServiceServer struct {
}

func (UnimplementedClockServiceServer) Clock(context.Context, *ClockRequest) (*ClockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clock not implemented")
}
func (UnimplementedClockServiceServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedClockServiceServer) mustEmbedUnimplementedClockServiceServer() {}

// UnsafeClockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClockServiceServer will
// result in compilation errors.
type UnsafeClockServiceServer interface {
	mustEmbedUnimplementedClockServiceServer()
}

func RegisterClockServiceServer(s *grpc.Server, srv ClockServiceServer) {
	s.RegisterService(&_ClockService_serviceDesc, srv)
}

func _ClockService_Clock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClockServiceServer).Clock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clock.ClockService/Clock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClockServiceServer).Clock(ctx, req.(*ClockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClockService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClockServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clock.ClockService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClockServiceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClockService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clock.ClockService",
	HandlerType: (*ClockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Clock",
			Handler:    _ClockService_Clock_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _ClockService_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/clock.proto",
}
